import 'dart:io';
import 'dart:typed_data';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart' as firebase_storage;
import 'package:firebase_storage/firebase_storage.dart';
import 'package:splash/models/medicine_model.dart';
import 'package:splash/models/pharmacy_model.dart';
import 'package:splash/models/user_model.dart';

class FirebaseService {
  CollectionReference homeBanner =
      FirebaseFirestore.instance.collection("homeBanner");

  CollectionReference pharmacies =
      FirebaseFirestore.instance.collection("stores");
  CollectionReference medicines =
      FirebaseFirestore.instance.collection("medicines");
  CollectionReference users =
      FirebaseFirestore.instance.collection("pharmaUser");

  // get current user
  User? user = FirebaseAuth.instance.currentUser;

  firebase_storage.FirebaseStorage storage =
      firebase_storage.FirebaseStorage.instance;

  Future<String> uploadImage(dynamic file, String? reference) async {
    firebase_storage.Reference ref =
        firebase_storage.FirebaseStorage.instance.ref(reference);
    final TaskSnapshot snapshot = await ref.putData(file);
    String downloadURL = await snapshot.ref.getDownloadURL();
    return downloadURL;
  }

  Future<List<String>> uploadDocs(
      List<Map<String, dynamic>> files, String? reference) async {
    List<String> downloadPaths = [];

    for (int i = 0; i < files.length; i++) {
      firebase_storage.Reference ref = firebase_storage.FirebaseStorage.instance
          .ref("$reference/${files[i]['name']}");
      final TaskSnapshot snapshot = await ref.putData(files[i]['file']);
      String downloadURL = await snapshot.ref.getDownloadURL();
      downloadPaths.add(downloadURL);
    }
    return downloadPaths;
  }

  Future<void> updateMedicine(id, imgUrl) async {
    final DocumentReference documentRef = await medicines.doc(id);
    return documentRef
        .update({'imageUrl': imgUrl})
        .then((_) => print("New medicine is added with ID: $id"))
        .catchError(
            (error) => print("Failed to update imageUrl field: $error"));
  }

  Future<void> updatePharmacy(id, imgUrl, docs) async {
    final DocumentReference documentRef = await pharmacies.doc(id);
    return documentRef
        .update({'imageUrl': imgUrl, 'documents': docs})
        .then((_) => print("Pharmacy is updated with ID: $id"))
        .catchError((error) => print("Failed to update files field: $error"));
  }

  Future<void> updateUser(id, imgUrl, docs) async {
    final DocumentReference documentRef = await users.doc(id);
    return documentRef
        .update({'imageUrl': imgUrl, 'documents': docs})
        .then((_) => print("User is updated with ID: $id"))
        .catchError((error) => print("Failed to update files field: $error"));
  }

  Future<void> updatePharmacyState(id, state) async {
    final DocumentReference documentRef = await pharmacies.doc(id);
    return documentRef
        .update({'state': state})
        .then((_) => print("Pharmacy is updated with ID: $id"))
        .catchError((error) => print("Failed to update files field: $error"));
  }

  Future<String> addPharmacy(Pharmacy pharmacy) async {
    final DocumentReference documentRef =
        await pharmacies.add(pharmacy.toJson());
    final String autoGeneratedID = documentRef.id;
    return autoGeneratedID;
  }

  Future<String> addUser(PharmaUser user) async {
    final DocumentReference documentRef = await users.add(user.toJson());
    final String autoGeneratedID = documentRef.id;
    return autoGeneratedID;
  }

  Future<String> addMedicine(Medicine medicine) async {
    final DocumentReference documentRef =
        await medicines.add(medicine.toJson());
    final String autoGeneratedID = documentRef.id;
    return autoGeneratedID;
  }

  Future<List<Medicine>> listMedicines() async {
    QuerySnapshot querySnapshot =
        await FirebaseFirestore.instance.collection('medicines').get();
    List<Medicine> medicines = [];

    querySnapshot.docs.forEach((doc) {
      medicines.add(Medicine.fromJson(doc.data() as Map<String, dynamic>));
    });

    return medicines;
  }

  Future<List<PharmaUser>> listUsers() async {
    QuerySnapshot querySnapshot =
        await FirebaseFirestore.instance.collection('pharmaUser').get();
    List<PharmaUser> users = [];

    querySnapshot.docs.forEach((doc) {
      users.add(PharmaUser.fromJson(doc.data() as Map<String, dynamic>));
    });

    return users;
  }

  Future<List<Pharmacy>> listPharmacies() async {
    QuerySnapshot querySnapshot =
        await FirebaseFirestore.instance.collection('stores').get();
    List<Pharmacy> stores = [];

    querySnapshot.docs.forEach((DocumentSnapshot doc) {
      Pharmacy pharmacy = Pharmacy.fromJson(doc.data() as Map<String, dynamic>);
      pharmacy.id = doc.id;
      stores.add(pharmacy);
    });

    return stores;
  }

  // UPDATE CALLS

  Future<void> updatePharmacyData(
      String storeId, Map<String, dynamic> updatedData) {
    return pharmacies.doc(storeId).update(updatedData);
  }
}
